schema {
  query: Query
  mutation: Mutation
}

directive @isAdmin on FIELD_DEFINITION
directive @hasAuth on FIELD_DEFINITION

type Query {
  voter: Voter @hasAuth
  nominations(department: Department): [Nomination!]
  works(department: Department): [Work!]
  ranking(department: Department!): Ranking
  rankings: [Ranking!]
}

type Mutation {
  newNomination(department: Department!, workName: String!): Nomination @hasAuth
  deleteNomination(id: ID!): Boolean @hasAuth

  newWork(input: WorkInput!): Work @isAdmin
  workAddAlias(id: ID!, alias: [String!]): Work @isAdmin

  postBallot(input: BallotInput!): Ballot @hasAuth
}

type Voter {
  id: ID!
  name: String!
  ballot(department: Department!): Ballot
  nominations(department: Department!): [Nomination!]
}

type Nomination {
  id: ID!
  voterID: ID!
  department: Department!
  workName: String!
  workID: ID
  work: Work
}

input WorkInput {
  department: Department!
  nameCN: String!
  nameOrigin: String!
}

type Work {
  id: ID!
  department: Department!
  nameCN: String!
  nameOrigin: String!
  alias: [String!]
}

input BallotInput {
  department: Department!
  candidates: [WorkRankingInput!]!
}

type Ballot {
  id: ID!
  voterID: ID!
  department: Department!
  candidates: [WorkRanking!]!
}

input WorkRankingInput {
  Ranking: Int!
  WorkID: ID!
}

type WorkRanking {
  Ranking: Int!
  WorkID: ID!
  Work: Work
}

type Ranking {
  department: Department!
  rankings: [WorkRanking!]
}

enum Department {
  TVAnime
  NonTVAnime
  Manga
  Game
  Novel
}
