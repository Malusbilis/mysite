// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Ballot struct {
	ID         uint           `json:"id"`
	VoterID    uint           `json:"voterID"`
	Department Department     `json:"department"`
	Candidates []*WorkRanking `json:"candidates"`
}

type BallotInput struct {
	ID         uint                `json:"id"`
	Department Department          `json:"department"`
	Candidates []*WorkRankingInput `json:"candidates"`
}

type Nomination struct {
	ID         uint       `json:"id"`
	VoterID    uint       `json:"voterID"`
	Department Department `json:"department"`
	WorkName   string     `json:"workName"`
	WorkID     *uint      `json:"workID"`
	Work       *Work      `json:"work"`
}

type Ranking struct {
	Department Department     `json:"department"`
	Rankings   []*WorkRanking `json:"rankings"`
}

type Voter struct {
	ID   uint   `json:"id"`
	Name string `json:"name"`
}

type VoterOutput struct {
	Voter *Voter `json:"voter"`
	Pin   string `json:"pin"`
}

type Work struct {
	ID         uint       `json:"id"`
	Department Department `json:"department"`
	WorkName   string     `json:"workName"`
	Alias      []string   `json:"alias"`
}

type WorkRanking struct {
	Ranking int   `json:"Ranking"`
	WorkID  uint  `json:"WorkID"`
	Work    *Work `json:"Work"`
}

type WorkRankingInput struct {
	Ranking int  `json:"Ranking"`
	WorkID  uint `json:"WorkID"`
}

type Department string

const (
	DepartmentTVAnime    Department = "TVAnime"
	DepartmentNonTVAnime Department = "NonTVAnime"
	DepartmentManga      Department = "Manga"
	DepartmentGame       Department = "Game"
	DepartmentNovel      Department = "Novel"
)

var AllDepartment = []Department{
	DepartmentTVAnime,
	DepartmentNonTVAnime,
	DepartmentManga,
	DepartmentGame,
	DepartmentNovel,
}

func (e Department) IsValid() bool {
	switch e {
	case DepartmentTVAnime, DepartmentNonTVAnime, DepartmentManga, DepartmentGame, DepartmentNovel:
		return true
	}
	return false
}

func (e Department) String() string {
	return string(e)
}

func (e *Department) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Department(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Department", str)
	}
	return nil
}

func (e Department) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
