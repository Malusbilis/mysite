package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.21 DO NOT EDIT.

import (
	"context"
	"fmt"

	"github.com/nanozuki/crows.moe/mediavote/backend/graph/model"
)

// NewVoter is the resolver for the newVoter field.
func (r *mutationResolver) NewVoter(ctx context.Context, name string) (*model.VoterOutput, error) {
	panic(fmt.Errorf("not implemented: NewVoter - newVoter"))
}

// LoginVoter is the resolver for the loginVoter field.
func (r *mutationResolver) LoginVoter(ctx context.Context, name string, pin string) (*model.Voter, error) {
	panic(fmt.Errorf("not implemented: LoginVoter - loginVoter"))
}

// NewNomination is the resolver for the newNomination field.
func (r *mutationResolver) NewNomination(ctx context.Context, department model.Department, workName string) (*model.Nomination, error) {
	panic(fmt.Errorf("not implemented: NewNomination - newNomination"))
}

// DeleteNomination is the resolver for the deleteNomination field.
func (r *mutationResolver) DeleteNomination(ctx context.Context, id uint) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteNomination - deleteNomination"))
}

// NewWork is the resolver for the newWork field.
func (r *mutationResolver) NewWork(ctx context.Context, department model.Department, workName string) (*model.Work, error) {
	panic(fmt.Errorf("not implemented: NewWork - newWork"))
}

// WorkAddAlias is the resolver for the workAddAlias field.
func (r *mutationResolver) WorkAddAlias(ctx context.Context, id uint, alias []string) (*model.Work, error) {
	panic(fmt.Errorf("not implemented: WorkAddAlias - workAddAlias"))
}

// PostBallot is the resolver for the postBallot field.
func (r *mutationResolver) PostBallot(ctx context.Context, input *model.BallotInput) (*model.Ballot, error) {
	panic(fmt.Errorf("not implemented: PostBallot - postBallot"))
}

// Voter is the resolver for the voter field.
func (r *queryResolver) Voter(ctx context.Context, id uint) (*model.Voter, error) {
	panic(fmt.Errorf("not implemented: Voter - voter"))
}

// Nominations is the resolver for the nominations field.
func (r *queryResolver) Nominations(ctx context.Context, voterID *uint, department *model.Department) ([]*model.Nomination, error) {
	panic(fmt.Errorf("not implemented: Nominations - nominations"))
}

// Works is the resolver for the works field.
func (r *queryResolver) Works(ctx context.Context, department *model.Department) ([]*model.Work, error) {
	panic(fmt.Errorf("not implemented: Works - works"))
}

// Ballots is the resolver for the ballots field.
func (r *queryResolver) Ballots(ctx context.Context) ([]*model.Ballot, error) {
	panic(fmt.Errorf("not implemented: Ballots - ballots"))
}

// Ranking is the resolver for the ranking field.
func (r *queryResolver) Ranking(ctx context.Context, department model.Department) (*model.Ranking, error) {
	panic(fmt.Errorf("not implemented: Ranking - ranking"))
}

// Rankings is the resolver for the rankings field.
func (r *queryResolver) Rankings(ctx context.Context) ([]*model.Ranking, error) {
	panic(fmt.Errorf("not implemented: Rankings - rankings"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
