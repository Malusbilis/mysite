package service

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.21 DO NOT EDIT.

import (
	"context"
	"fmt"

	"github.com/nanozuki/crows.moe/mediavote/backend/core/entity"
	"github.com/nanozuki/crows.moe/mediavote/backend/core/port"
	"github.com/nanozuki/crows.moe/mediavote/backend/graph"
	"github.com/nanozuki/crows.moe/mediavote/backend/pkg/errors"
)

// NewVoter is the resolver for the newVoter field.
func (r *mutationResolver) NewVoter(ctx context.Context, name string) (*entity.VoterOutput, error) {
	panic(fmt.Errorf("not implemented: NewVoter - newVoter"))
}

// LoginVoter is the resolver for the loginVoter field.
func (r *mutationResolver) LoginVoter(ctx context.Context, name string, pin string) (*entity.Voter, error) {
	panic(fmt.Errorf("not implemented: LoginVoter - loginVoter"))
}

// NewNomination is the resolver for the newNomination field.
func (r *mutationResolver) NewNomination(ctx context.Context, department entity.Department, workName string) (*entity.Nomination, error) {
	voterID, err := getVoterID(ctx)
	if err != nil {
		return nil, err
	}
	nomi, err := entity.NewNomination(voterID, department, workName)
	if err != nil {
		return nil, err
	}
	if err := r.Repository.Nomination().Create(ctx, nomi); err != nil {
		return nil, err
	}
	return nomi, nil
}

// DeleteNomination is the resolver for the deleteNomination field.
func (r *mutationResolver) DeleteNomination(ctx context.Context, id uint) (*bool, error) {
	voterID, err := getVoterID(ctx)
	if err != nil {
		return nil, err
	}
	nomi, err := r.Repository.Nomination().GetByID(ctx, id)
	if err != nil {
		return nil, err
	}
	if nomi.VoterID != voterID {
		return nil, errors.Forbidden(errors.NotYourData)
	}
	err = r.Repository.Nomination().Delete(ctx, id)
	return toPtr(err == nil), err
}

// NewWork is the resolver for the newWork field.
func (r *mutationResolver) NewWork(ctx context.Context, department entity.Department, workName string) (*entity.Work, error) {
	panic(fmt.Errorf("not implemented: NewWork - newWork"))
}

// WorkAddAlias is the resolver for the workAddAlias field.
func (r *mutationResolver) WorkAddAlias(ctx context.Context, id uint, alias []string) (*entity.Work, error) {
	panic(fmt.Errorf("not implemented: WorkAddAlias - workAddAlias"))
}

// PostBallot is the resolver for the postBallot field.
func (r *mutationResolver) PostBallot(ctx context.Context, input *entity.BallotInput) (*entity.Ballot, error) {
	panic(fmt.Errorf("not implemented: PostBallot - postBallot"))
}

// Work is the resolver for the work field.
func (r *nominationResolver) Work(ctx context.Context, obj *entity.Nomination) (*entity.Work, error) {
	if obj.WorkID == nil {
		return nil, nil
	}
	return r.Repository.Work().GetByID(ctx, unwrapPtr(obj.WorkID))
}

// Voter is the resolver for the voter field.
func (r *queryResolver) Voter(ctx context.Context, id uint) (*entity.Voter, error) {
	panic(fmt.Errorf("not implemented: Voter - voter"))
}

// Nominations is the resolver for the nominations field.
func (r *queryResolver) Nominations(ctx context.Context, voterID *uint, department *entity.Department) ([]*entity.Nomination, error) {
	return r.Repository.Nomination().Search(ctx, &port.NominationQuery{
		VoterID:    unwrapPtr(voterID),
		Department: unwrapPtr(department),
	})
}

// Works is the resolver for the works field.
func (r *queryResolver) Works(ctx context.Context, department *entity.Department) ([]*entity.Work, error) {
	panic(fmt.Errorf("not implemented: Works - works"))
}

// Ballots is the resolver for the ballots field.
func (r *queryResolver) Ballots(ctx context.Context) ([]*entity.Ballot, error) {
	panic(fmt.Errorf("not implemented: Ballots - ballots"))
}

// Ranking is the resolver for the ranking field.
func (r *queryResolver) Ranking(ctx context.Context, department entity.Department) (*entity.Ranking, error) {
	panic(fmt.Errorf("not implemented: Ranking - ranking"))
}

// Rankings is the resolver for the rankings field.
func (r *queryResolver) Rankings(ctx context.Context) ([]*entity.Ranking, error) {
	panic(fmt.Errorf("not implemented: Rankings - rankings"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Nomination returns graph.NominationResolver implementation.
func (r *Resolver) Nomination() graph.NominationResolver { return &nominationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type nominationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
